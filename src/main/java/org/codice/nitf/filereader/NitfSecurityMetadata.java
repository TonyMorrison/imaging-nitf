/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
package org.codice.nitf.filereader;

import java.text.ParseException;

public class NitfSecurityMetadata {

    private NitfSecurityClassification nitfSecurityClassification = NitfSecurityClassification.UNKNOWN;
    private String nitfSecurityClassificationSystem = null;
    private String nitfCodewords = null;
    private String nitfControlAndHandling = null;
    private String nitfReleaseInstructions = null;
    // Could be an enumerated type
    private String nitfDeclassificationType = null;
    // String instead of Date because its frequently just an empty string
    private String nitfDeclassificationDate = null;
    private String nitfDeclassificationExemption = null;
    private String nitfDowngrade = null;
    // String instead of Date because its frequently just an empty string
    private String nitfDowngradeDate = null;
    private String nitfClassificationText = null;
    // Could be an enumerated type
    private String nitfClassificationAuthorityType = null;
    private String nitfClassificationAuthority = null;
    private String nitfClassificationReason = null;
    private String nitfSecuritySourceDate = null;
    private String nitfSecurityControlNumber = null;

    // NITF 2.0 values
    private String downgradeDateOrSpecialCase = null;
    private String downgradeEvent = null;

    public NitfSecurityMetadata() {
    }

    public NitfSecurityMetadata(final NitfReader nitfReader) throws ParseException {
        NitfSecurityMetadataParser parser = new NitfSecurityMetadataParser();
        parser.parse(nitfReader, this);
    }

    /**
        Set the security classification

        @param securityClassification security classification
    */
    public final void setSecurityClassification(final NitfSecurityClassification securityClassification) {
        nitfSecurityClassification = securityClassification;
    }

    /**
        Return the security classification.

        @return security classification
    */
    public final NitfSecurityClassification getSecurityClassification() {
        return nitfSecurityClassification;
    }

    /**
        Set the security classification system.
        <p>
        This field is only valid for NITF 2.1 / NSIF 1.0 files.
        <p>
        "This field shall contain valid values indicating the national or
        multinational security system used to classify the file. Country Codes per FIPS PUB 10-4 shall be used to
        indicate national security systems. The designator "XN" is for classified data generated by a component using
        NATO security system marking guidance. This code is outside the FIPS 10-4 document listing, and was
        selected to not duplicate that document's existing codes."
        <p>
        So system means "which country specified it". This field can be empty indicating no security classification
        system applied.
        <p>
        This field must be set if security-related details (e.g. codewords, control and handling instructions, release
        instructions, declassification instructions, declassification authorities, declassification dates or
        declassification exemptions) are set.

        @param securityClassificationSystem the security classification system (2 character country code)
    */
    public final void setSecurityClassificationSystem(final String securityClassificationSystem) {
        nitfSecurityClassificationSystem = securityClassificationSystem;
    }

    /**
        Return the security classification system.
        <p>
        This field is only valid for NITF 2.1 / NSIF 1.0 files.
        <p>
        "This field shall contain valid values indicating the national or
        multinational security system used to classify the file. Country Codes per FIPS PUB 10-4 shall be used to
        indicate national security systems. The designator "XN" is for classified data generated by a component using
        NATO security system marking guidance. This code is outside the FIPS 10-4 document listing, and was
        selected to not duplicate that document's existing codes."
        <p>
        So system means "which country specified it". This field can be empty indicating no security classification
        system applied.

        @return security classification system
    */
    public final String getSecurityClassificationSystem() {
        return nitfSecurityClassificationSystem;
    }

    /**
        Set the security codewords.
        <p>
        "This field shall contain a valid indicator of the security compartments associated with
        the file. Values include one or more of the digraphs found table A-4. Multiple entries shall be separated by a
        single ECS space (0x20): The selection of a relevant set of codewords is application specific."
        <p>
        Note that the list in MIL-STD-2500C table A-4 includes digraphs that are no longer used. Consult current guidance.
        <p>
        The maximum length is 11 characters for NITF 2.1 / NSIF 1.0; and 40 characters for NITF 2.0.

        @param codewords security codewords or an empty string if no codewords apply
    */
    public final void setCodewords(final String codewords) {
        nitfCodewords = codewords;
    }

    /**
        Return the security codewords.
        <p>
        "This field shall contain a valid indicator of the security compartments associated with
        the file. Values include one or more of the digraphs found table A-4. Multiple entries shall be separated by a
        single ECS space (0x20): The selection of a relevant set of codewords is application specific."
        <p>
        Note that the list in MIL-STD-2500C table A-4 includes digraphs that are no longer used. Consult current guidance.

        @return security codewords or an empty string if no codewords apply.
    */
    public final String getCodewords() {
        return nitfCodewords;
    }

    /**
        Set the security control and handling code instructions.
        <p>
        "This field shall contain valid additional security control and/or handling instructions
        (caveats) associated with the file. Values include digraphs found in table A-4. The digraph may indicate
        single or multiple caveats. The selection of a relevant caveat(s) is application specific."
        <p>
        Note that the list in MIL-STD-2500C table A-4 includes digraphs that are no longer used. Consult current guidance.
        <p>
        The maximum length is 2 characters for NITF 2.1 / NSIF 1.0; and 40 characters for NITF 2.0.

        @param instructions security control and handling codes, or an empty string if no codes apply.
    */
    public final void setControlAndHandling(final String instructions) {
        nitfControlAndHandling = instructions;
    }

    /**
        Return the security control and handling code instructions.
        <p>
        "This field shall contain valid additional security control and/or handling instructions
        (caveats) associated with the file. Values include digraphs found in table A-4. The digraph may indicate
        single or multiple caveats. The selection of a relevant caveat(s) is application specific."
        <p>
        Note that the list in MIL-STD-2500C table A-4 includes digraphs that are no longer used. Consult current guidance.

        @return security control and handling codes, or an empty string if no codes apply.
    */
    public final String getControlAndHandling() {
        return nitfControlAndHandling;
    }

    /**
        Set the release instructions.
        <p>
        "This field shall contain a valid list of country and/or multilateral entity codes to
        which countries and/or multilateral entities the file is authorized for release. Valid items in
        the list are one or more country codes as found in FIPS PUB 10-4 separated by a single ECS space (0x20)."
        <p>
        So the release instructions are the countries that this is "REL TO".

        @param releaseInstructions release instructions, or an empty string if no release instructions apply.
    */
    public final void setReleaseInstructions(final String releaseInstructions) {
        nitfReleaseInstructions = releaseInstructions;
    }

    /**
        Return the release instructions.
        <p>
        "This field shall contain a valid list of country and/or multilateral entity codes to
        which countries and/or multilateral entities the file is authorized for release. Valid items in
        the list are one or more country codes as found in FIPS PUB 10-4 separated by a single ECS space (0x20)."
        <p>
        So the release instructions are the countries that this is "REL TO".

        @return release instructions, or an empty string if no release instructions apply.
    */
    public final String getReleaseInstructions() {
        return nitfReleaseInstructions;
    }

    public final void setDeclassificationType(final String declassificationType) {
        nitfDeclassificationType = declassificationType;
    }

    public final String getDeclassificationType() {
        return nitfDeclassificationType;
    }

    public final void setDeclassificationDate(final String declassificationDate) {
        nitfDeclassificationDate = declassificationDate;
    }

    public final String getDeclassificationDate() {
        return nitfDeclassificationDate;
    }

    public final void setDeclassificationExemption(final String declassificationExemption) {
        nitfDeclassificationExemption = declassificationExemption;
    }

    public final String getDeclassificationExemption() {
        return nitfDeclassificationExemption;
    }

    public final void setDowngrade(final String downgrade) {
        nitfDowngrade = downgrade;
    }

    public final String getDowngrade() {
        return nitfDowngrade;
    }

    public final void setDowngradeDate(final String downgradeDate) {
        nitfDowngradeDate = downgradeDate;
    }

    public final String getDowngradeDate() {
        return nitfDowngradeDate;
    }

    /**
      Set the downgrade date or special case for this file.

      This is not valid on NITF 2.1 or NSIF 1.0 files.

      The valid values are:
      (1) the calendar date in the format YYMMDD
      (2) the code "999999" when the originating agency's determination is required (OADR)
      (3) the code "999998" when a specific event determines at what point declassification or downgrading is to take place.

      If the third case (999998) is set, use setDowngradeEvent() to specify the downgrade event.

      @param dateOrSpecialCase the date or special case
    */
    public final void setDowngradeDateOrSpecialCase(final String dateOrSpecialCase) {
        downgradeDateOrSpecialCase = dateOrSpecialCase;
    }

    /**
      Return the downgrade date or special case for this file.

      This is not valid on NITF 2.1 or NSIF 1.0 files.

      The valid values are:
      (1) the calendar date in the format YYMMDD
      (2) the code "999999" when the originating agency's determination is required (OADR)
      (3) the code "999998" when a specific event determines at what point declassification or downgrading is to take place.

      If the third case (999998) occurs, use getDowngradeEvent() to determine the downgrade event.
    */
    public final String getDowngradeDateOrSpecialCase() {
        return downgradeDateOrSpecialCase;
    }

    public final void setDowngradeEvent(final String event) {
        downgradeEvent = event;
    }

    /**
      Get the specific downgrade event for this file.

      This is not valid on NITF 2.1 or NSIF 1.0 files.

      This is only valid if getDowngradeDateOrSpecialCase() is equal to 999998.
     */
    public final String getDowngradeEvent() {
        return downgradeEvent;
    }

    public final void setClassificationText(final String classificationText) {
        nitfClassificationText = classificationText;
    }

    public final String getClassificationText() {
        return nitfClassificationText;
    }

    public final void setClassificationAuthorityType(final String classificationAuthorityType) {
        nitfClassificationAuthorityType = classificationAuthorityType;
    }

    public final String getClassificationAuthorityType() {
        return nitfClassificationAuthorityType;
    }

    public final void setClassificationAuthority(final String classificationAuthority) {
        nitfClassificationAuthority = classificationAuthority;
    }

    public final String getClassificationAuthority() {
        return nitfClassificationAuthority;
    }

    public final void setClassificationReason(final String classificationReason) {
        nitfClassificationReason = classificationReason;
    }

    public final String getClassificationReason() {
        return nitfClassificationReason;
    }

    public final void setSecuritySourceDate(final String securitySourceDate) {
        nitfSecuritySourceDate = securitySourceDate;
    }

    public final String getSecuritySourceDate() {
        return nitfSecuritySourceDate;
    }

    public final void setSecurityControlNumber(final String securityControlNumber) {
        nitfSecurityControlNumber = securityControlNumber;
    }

    public final String getSecurityControlNumber() {
        return nitfSecurityControlNumber;
    }
};

